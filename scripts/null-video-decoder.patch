diff --git a/video/video_receive_stream.cc b/video/video_receive_stream.cc
index 02eb9034fc..786276ad43 100644
--- a/video/video_receive_stream.cc
+++ b/video/video_receive_stream.cc
@@ -334,9 +334,11 @@ void VideoReceiveStream::Start() {
   }
 
   for (const Decoder& decoder : config_.decoders) {
-    std::unique_ptr<VideoDecoder> video_decoder =
-        config_.decoder_factory->LegacyCreateVideoDecoder(decoder.video_format,
-                                                          config_.stream_id);
+    std::unique_ptr<VideoDecoder> video_decoder = NULL;
+    if (!getenv("USE_NULL_VIDEO_DECODER")) {
+      video_decoder = config_.decoder_factory->LegacyCreateVideoDecoder(decoder.video_format,
+                                                      config_.stream_id);
+    }
     // If we still have no valid decoder, we have to create a "Null" decoder
     // that ignores all calls. The reason we can get into this state is that the
     // old decoder factory interface doesn't have a way to query supported
diff --git a/video/video_receive_stream2.cc b/video/video_receive_stream2.cc
index 21c188fe7c..a5c7684fcc 100644
--- a/video/video_receive_stream2.cc
+++ b/video/video_receive_stream2.cc
@@ -321,9 +321,11 @@ void VideoReceiveStream2::Start() {
   }
 
   for (const Decoder& decoder : config_.decoders) {
-    std::unique_ptr<VideoDecoder> video_decoder =
-        config_.decoder_factory->LegacyCreateVideoDecoder(decoder.video_format,
-                                                          config_.stream_id);
+    std::unique_ptr<VideoDecoder> video_decoder = NULL;
+    if (!getenv("USE_NULL_VIDEO_DECODER")) {
+      video_decoder = config_.decoder_factory->LegacyCreateVideoDecoder(decoder.video_format,
+                                                      config_.stream_id);
+    }
     // If we still have no valid decoder, we have to create a "Null" decoder
     // that ignores all calls. The reason we can get into this state is that the
     // old decoder factory interface doesn't have a way to query supported
